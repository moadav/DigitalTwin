// <auto-generated />
using System;
using BysykkelDatafetcher;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BysykkelDatafetcher.Migrations
{
    [DbContext(typeof(StationContext))]
    [Migration("20220318045521_addWeatherTable")]
    partial class addWeatherTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BysykkelDatafetcher.Station", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("capacity")
                        .HasColumnType("int");

                    b.Property<int>("is_installed")
                        .HasColumnType("int");

                    b.Property<int>("is_renting")
                        .HasColumnType("int");

                    b.Property<int>("is_returning")
                        .HasColumnType("int");

                    b.Property<int>("last_reported")
                        .HasColumnType("int");

                    b.Property<double>("lat")
                        .HasColumnType("float");

                    b.Property<double>("lon")
                        .HasColumnType("float");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("num_bikes_available")
                        .HasColumnType("int");

                    b.Property<int>("num_docks_available")
                        .HasColumnType("int");

                    b.Property<string>("station_id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("BysykkelDatafetcher.WeatherPoint", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("air_pressure_at_sea_level")
                        .HasColumnType("float");

                    b.Property<double>("air_temperature")
                        .HasColumnType("float");

                    b.Property<double>("cloud_area_fraction")
                        .HasColumnType("float");

                    b.Property<double>("lat")
                        .HasColumnType("float");

                    b.Property<double>("lon")
                        .HasColumnType("float");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("precipitation_amount")
                        .HasColumnType("float");

                    b.Property<double>("relative_humidity")
                        .HasColumnType("float");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.Property<double>("wind_from_direction")
                        .HasColumnType("float");

                    b.Property<double>("wind_speed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("WeatherPoints");
                });
#pragma warning restore 612, 618
        }
    }
}
