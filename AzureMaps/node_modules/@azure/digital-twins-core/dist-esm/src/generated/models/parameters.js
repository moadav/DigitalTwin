/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { QueryCollectionFormat } from "@azure/core-http";
import { QuerySpecification as QuerySpecificationMapper, EventRoute as EventRouteMapper } from "../models/mappers";
export var contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export var models = {
    parameterPath: ["options", "models"],
    mapper: {
        constraints: {
            MinItems: 1,
            UniqueItems: true
        },
        serializedName: "models",
        type: {
            name: "Sequence",
            element: { type: { name: "any" } }
        }
    }
};
export var $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export var traceparent = {
    parameterPath: ["options", "traceparent"],
    mapper: {
        serializedName: "traceparent",
        type: {
            name: "String"
        }
    }
};
export var tracestate = {
    parameterPath: ["options", "tracestate"],
    mapper: {
        serializedName: "tracestate",
        type: {
            name: "String"
        }
    }
};
export var apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-10-31",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export var dependenciesFor = {
    parameterPath: ["options", "dependenciesFor"],
    mapper: {
        serializedName: "dependenciesFor",
        type: {
            name: "Sequence",
            element: { type: { name: "String" } }
        }
    },
    collectionFormat: QueryCollectionFormat.Csv
};
export var includeModelDefinition = {
    parameterPath: ["options", "includeModelDefinition"],
    mapper: {
        serializedName: "includeModelDefinition",
        type: {
            name: "Boolean"
        }
    }
};
export var maxItemsPerPage = {
    parameterPath: ["options", "maxItemsPerPage"],
    mapper: {
        serializedName: "max-items-per-page",
        type: {
            name: "Number"
        }
    }
};
export var id = {
    parameterPath: "id",
    mapper: {
        serializedName: "id",
        required: true,
        type: {
            name: "String"
        }
    }
};
export var contentType1 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json-patch+json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export var updateModel = {
    parameterPath: "updateModel",
    mapper: {
        serializedName: "updateModel",
        required: true,
        type: {
            name: "Sequence",
            element: { type: { name: "any" } }
        }
    }
};
export var nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export var querySpecification = {
    parameterPath: "querySpecification",
    mapper: QuerySpecificationMapper
};
export var twin = {
    parameterPath: "twin",
    mapper: {
        serializedName: "twin",
        required: true,
        type: {
            name: "any"
        }
    }
};
export var ifNoneMatch = {
    parameterPath: ["options", "ifNoneMatch"],
    mapper: {
        serializedName: "If-None-Match",
        type: {
            name: "String"
        }
    }
};
export var ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
export var patchDocument = {
    parameterPath: "patchDocument",
    mapper: {
        serializedName: "patchDocument",
        required: true,
        type: {
            name: "Sequence",
            element: { type: { name: "any" } }
        }
    }
};
export var relationshipId = {
    parameterPath: "relationshipId",
    mapper: {
        serializedName: "relationshipId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export var relationship = {
    parameterPath: "relationship",
    mapper: {
        serializedName: "relationship",
        required: true,
        type: {
            name: "any"
        }
    }
};
export var relationshipName = {
    parameterPath: ["options", "relationshipName"],
    mapper: {
        serializedName: "relationshipName",
        type: {
            name: "String"
        }
    }
};
export var telemetry = {
    parameterPath: "telemetry",
    mapper: {
        serializedName: "telemetry",
        required: true,
        type: {
            name: "any"
        }
    }
};
export var messageId = {
    parameterPath: "messageId",
    mapper: {
        serializedName: "Message-Id",
        required: true,
        type: {
            name: "String"
        }
    }
};
export var telemetrySourceTime = {
    parameterPath: ["options", "telemetrySourceTime"],
    mapper: {
        serializedName: "Telemetry-Source-Time",
        type: {
            name: "String"
        }
    }
};
export var componentPath = {
    parameterPath: "componentPath",
    mapper: {
        serializedName: "componentPath",
        required: true,
        type: {
            name: "String"
        }
    }
};
export var eventRoute = {
    parameterPath: ["options", "eventRoute"],
    mapper: EventRouteMapper
};
//# sourceMappingURL=parameters.js.map