{"version":3,"file":"tracing.js","sourceRoot":"","sources":["../../src/tracing.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAChD,OAAO,EAAqB,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAKjE;;;;;GAKG;AACH,MAAM,UAAU,UAAU,CACxB,aAAqB,EACrB,gBAAmB;IAEnB,IAAM,MAAM,GAAG,SAAS,EAAE,CAAC;IAC3B,IAAM,cAAc,GAAG,gBAAgB,CAAC,cAAc,IAAI,EAAE,CAAC;IAC7D,IAAM,WAAW,yBACZ,cAAc,CAAC,WAAW,KAC7B,IAAI,EAAE,QAAQ,CAAC,QAAQ,GACxB,CAAC;IAEF,IAAM,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,wBAAsB,aAAe,EAAE,WAAW,CAAC,CAAC;IAElF,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,wBAAwB,CAAC,CAAC;IAE5D,IAAI,cAAc,GAAG,cAAc,CAAC,WAAW,IAAI,EAAE,CAAC;IACtD,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE;QACtB,cAAc,yBACT,cAAc,CAAC,WAAW,KAC7B,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,EACtB,UAAU,wBACL,WAAW,CAAC,UAAU,KACzB,cAAc,EAAE,wBAAwB,MAE3C,CAAC;KACH;IAED,IAAM,iBAAiB,yBAClB,cAAc,KACjB,WAAW,EAAE,cAAc,GAC5B,CAAC;IAEF,IAAM,mBAAmB,yBACpB,gBAAgB,KACnB,cAAc,EAAE,iBAAiB,GAClC,CAAC;IAEF,OAAO;QACL,IAAI,MAAA;QACJ,cAAc,EAAE,mBAAmB;KACpC,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getTracer } from \"@azure/core-tracing\";\nimport { Span, SpanOptions, SpanKind } from \"@opentelemetry/api\";\nimport { OperationOptions } from \"@azure/core-http\";\n\ntype OperationTracingOptions = OperationOptions[\"tracingOptions\"];\n\n/**\n * Creates a span using the global tracer.\n * @internal\n * @param name The name of the operation being performed.\n * @param tracingOptions The options for the underlying http request.\n */\nexport function createSpan<T extends OperationOptions>(\n  operationName: string,\n  operationOptions: T\n): { span: Span; updatedOptions: T } {\n  const tracer = getTracer();\n  const tracingOptions = operationOptions.tracingOptions || {};\n  const spanOptions: SpanOptions = {\n    ...tracingOptions.spanOptions,\n    kind: SpanKind.INTERNAL\n  };\n\n  const span = tracer.startSpan(`DigitalTwinsClient.${operationName}`, spanOptions);\n\n  span.setAttribute(\"az.namespace\", \"Microsoft.DigitalTwins\");\n\n  let newSpanOptions = tracingOptions.spanOptions || {};\n  if (span.isRecording()) {\n    newSpanOptions = {\n      ...tracingOptions.spanOptions,\n      parent: span.context(),\n      attributes: {\n        ...spanOptions.attributes,\n        \"az.namespace\": \"Microsoft.DigitalTwins\"\n      }\n    };\n  }\n\n  const newTracingOptions: OperationTracingOptions = {\n    ...tracingOptions,\n    spanOptions: newSpanOptions\n  };\n\n  const newOperationOptions: T = {\n    ...operationOptions,\n    tracingOptions: newTracingOptions\n  };\n\n  return {\n    span,\n    updatedOptions: newOperationOptions\n  };\n}\n"]}