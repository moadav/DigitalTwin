{"version":3,"file":"digitalTwinsClient.js","sourceRoot":"","sources":["../../src/digitalTwinsClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport {\n  TokenCredential,\n  RestResponse,\n  OperationOptions,\n  InternalPipelineOptions,\n  bearerTokenAuthenticationPolicy,\n  createPipelineFromOptions,\n  generateUuid,\n  PipelineOptions\n} from \"@azure/core-http\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { AzureDigitalTwinsAPI as GeneratedClient } from \"./generated/azureDigitalTwinsAPI\";\nimport {\n  DigitalTwinsGetByIdResponse,\n  DigitalTwinsAddOptionalParams,\n  DigitalTwinsAddResponse,\n  DigitalTwinsUpdateOptionalParams,\n  DigitalTwinsUpdateResponse,\n  DigitalTwinsDeleteOptionalParams,\n  DigitalTwinsGetComponentResponse,\n  DigitalTwinsUpdateComponentResponse,\n  DigitalTwinsUpdateComponentOptionalParams,\n  DigitalTwinsAddRelationshipResponse,\n  DigitalTwinsAddRelationshipOptionalParams,\n  DigitalTwinsUpdateRelationshipOptionalParams,\n  DigitalTwinsUpdateRelationshipResponse,\n  DigitalTwinsDeleteRelationshipOptionalParams,\n  DigitalTwinsSendTelemetryOptionalParams,\n  DigitalTwinsSendComponentTelemetryOptionalParams,\n  DigitalTwinsListRelationshipsResponse,\n  IncomingRelationship,\n  DigitalTwinsListIncomingRelationshipsResponse,\n  DigitalTwinsGetRelationshipByIdResponse,\n  DigitalTwinsModelData,\n  DigitalTwinModelsGetByIdResponse,\n  DigitalTwinModelsGetByIdOptionalParams,\n  DigitalTwinModelsAddResponse,\n  DigitalTwinModelsAddOptionalParams,\n  DigitalTwinModelsListResponse,\n  DigitalTwinModelsListOptionalParams,\n  EventRoutesGetByIdResponse,\n  EventRoute,\n  EventRoutesAddOptionalParams,\n  EventRoutesListNextResponse,\n  EventRoutesListOptionalParams,\n  QueryQueryTwinsOptionalParams,\n  QueryQueryTwinsResponse,\n  QuerySpecification\n} from \"./generated/models\";\nimport { createSpan } from \"./tracing\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { logger } from \"./logger\";\n\nexport const SDK_VERSION: string = \"1.0.3\";\n\nexport interface DigitalTwinsClientOptions extends PipelineOptions {\n  /**\n   * Api Version\n   */\n  apiVersion?: string;\n}\n\nconst DEFAULT_DIGITALTWINS_SCOPE = \"https://digitaltwins.azure.net/.default\";\n\n/**\n * Client for Azure IoT DigitalTwins API.\n */\nexport class DigitalTwinsClient {\n  /**\n   * @internal\n   * A reference to the auto-generated AzureDigitalTwinsAPI\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * Creates an instance of AzureDigitalTwinsAPI.\n   *\n   * Example usage:\n   * ```ts\n   * const { DigitalTwinsClient, ServiceClientCredentials } = require(\"@azure/digital-twins-core\");\n   *\n   * const client = new DigitalTwinsClient(\n   *   \"<endpoint>\",\n   *   new DefaultAzureCredential();\n   * );\n   * ```\n   * @param endpointUrl The endpoint URL of the service.\n   * @param credential Used to authenticate requests to the service.\n   * @param options Used to configure the service client.\n   */\n  constructor(\n    endpointUrl: string,\n    credential: TokenCredential,\n    options: DigitalTwinsClientOptions = {}\n  ) {\n    const authPolicy = bearerTokenAuthenticationPolicy(credential, DEFAULT_DIGITALTWINS_SCOPE);\n    const libInfo = `azsdk-js-digital-twins-core/${SDK_VERSION}`;\n\n    const { apiVersion, ...pipelineOptions } = options;\n    if (!pipelineOptions.userAgentOptions) {\n      pipelineOptions.userAgentOptions = {};\n    }\n    if (pipelineOptions.userAgentOptions.userAgentPrefix) {\n      pipelineOptions.userAgentOptions.userAgentPrefix = `${pipelineOptions.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      pipelineOptions.userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...pipelineOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          allowedHeaderNames: [\"x-ms-request-id\"]\n        }\n      }\n    };\n\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);\n\n    this.client = new GeneratedClient({\n      endpoint: endpointUrl,\n      apiVersion,\n      ...pipeline\n    });\n  }\n\n  /**\n   * Get a digital twin\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   * @param options The operation options\n   * @returns The application/json digital twin and the http response.\n   */\n  public getDigitalTwin(\n    digitalTwinId: string,\n    options: OperationOptions = {}\n  ): Promise<DigitalTwinsGetByIdResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-getDigitalTwin\", options);\n    try {\n      return this.client.digitalTwins.getById(digitalTwinId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Create or update a digital twin\n   *\n   * @param digitalTwinId The Id of the digital twin to create or update.\n   * @param digitalTwinJson The application/json digital twin to create.\n   * @param options Extended operation options including\n   *  ifNoneMatch: Only perform the operation if the entity does not already exist.\n   * @returns The created application/json digital twin and the http response.\n   */\n  public upsertDigitalTwin(\n    digitalTwinId: string,\n    digitalTwinJson: string,\n    options: DigitalTwinsAddOptionalParams = {}\n  ): Promise<DigitalTwinsAddResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-upsertDigitalTwin\", options);\n    try {\n      const payload = JSON.parse(digitalTwinJson);\n      return this.client.digitalTwins.add(digitalTwinId, payload, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Update a digital twin using a json patch.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   * @param jsonPatch An update specification described by JSON Patch. Updates to property values\n   * and $model elements may happen in the same request. Operations are limited to add, replace and\n   * remove.\n   * @param options Extended operation options including\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n   * @returns The http response.\n   */\n  public updateDigitalTwin(\n    digitalTwinId: string,\n    jsonPatch: any,\n    options: DigitalTwinsUpdateOptionalParams = {}\n  ): Promise<DigitalTwinsUpdateResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-updateDigitalTwin\", options);\n    try {\n      return this.client.digitalTwins.update(digitalTwinId, jsonPatch, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete a digital twin\n   *\n   * @param digitalTwinId The Id of the digital twin to delete.\n   * @param options Extended operation options including\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n   * @returns The http response.\n   */\n  public deleteDigitalTwin(\n    digitalTwinId: string,\n    options: DigitalTwinsDeleteOptionalParams = {}\n  ): Promise<RestResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-deleteDigitalTwin\", options);\n    try {\n      return this.client.digitalTwins.delete(digitalTwinId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get a component on a digital twin.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   * @param componentName The component being retrieved.\n   * @param options The operation options\n   * @returns Json string representation of the component corresponding to the provided componentName and the HTTP response.\n   */\n  public getComponent(\n    digitalTwinId: string,\n    componentName: string,\n    options: OperationOptions = {}\n  ): Promise<DigitalTwinsGetComponentResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-getComponent\", options);\n    try {\n      return this.client.digitalTwins.getComponent(digitalTwinId, componentName, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Update properties of a component on a digital twin using a JSON patch.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   * @param componentName The component being updated.\n   * @param jsonPatch The application/json-patch+json operations to be performed on the specified digital twin's component.\n   * @param enableUpdate If true then update of an existing digital twin is enabled.\n   * @param options Extended operation options including\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n   * @returns The http response.\n   */\n  public updateComponent(\n    digitalTwinId: string,\n    componentName: string,\n    jsonPatch: any[],\n    options: DigitalTwinsUpdateComponentOptionalParams = {}\n  ): Promise<DigitalTwinsUpdateComponentResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-updateComponent\", options);\n    try {\n      return this.client.digitalTwins.updateComponent(\n        digitalTwinId,\n        componentName,\n        jsonPatch,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get a relationship on a digital twin.\n   *\n   * @param digitalTwinId The Id of the source digital twin.\n   * @param relationshipId The Id of the relationship to retrieve.\n   * @param options The operation options\n   * @returns The pageable list of application/json relationships belonging to the specified digital twin and the http response.\n   */\n  public getRelationship(\n    digitalTwinId: string,\n    relationshipId: string,\n    options: OperationOptions = {}\n  ): Promise<DigitalTwinsGetRelationshipByIdResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-getRelationship\", options);\n    try {\n      return this.client.digitalTwins.getRelationshipById(\n        digitalTwinId,\n        relationshipId,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Create or update a relationship on a digital twin.\n   *\n   * @param digitalTwinId The Id of the source digital twin.\n   * @param relationshipId The Id of the relationship to create.\n   * @param relationship: The application/json relationship to be created.\n   * @param options Extended operation options including\n   *  ifNoneMatch: Only perform the operation if the entity does not already exist.\n   */\n  public upsertRelationship(\n    digitalTwinId: string,\n    relationshipId: string,\n    relationship: any,\n    options: DigitalTwinsAddRelationshipOptionalParams = {}\n  ): Promise<DigitalTwinsAddRelationshipResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-upsertRelationship\", options);\n    try {\n      return this.client.digitalTwins.addRelationship(\n        digitalTwinId,\n        relationshipId,\n        relationship,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Updates the properties of a relationship on a digital twin using a JSON patch.\n   *\n   * @param digitalTwinId The Id of the digital twin to delete.\n   * @param relationshipId The Id of the relationship to be updated.\n   * @param jsonPatch The application/json-patch+json operations to be performed on the specified digital twin's relationship.\n   * @param options Extended operation options\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n   */\n  public updateRelationship(\n    digitalTwinId: string,\n    relationshipId: string,\n    jsonPatch: any[],\n    options: DigitalTwinsUpdateRelationshipOptionalParams = {}\n  ): Promise<DigitalTwinsUpdateRelationshipResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-updateRelationship\", options);\n    try {\n      return this.client.digitalTwins.updateRelationship(\n        digitalTwinId,\n        relationshipId,\n        jsonPatch,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete a relationship on a digital twin.\n   *\n   * @param digitalTwinId The Id of the source digital twin.\n   * @param relationshipId The Id of the relationship to delete.\n   * @param options The operation options\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is\n   * @returns The http response.\n   */\n  public deleteRelationship(\n    digitalTwinId: string,\n    relationshipId: string,\n    options: DigitalTwinsDeleteRelationshipOptionalParams = {}\n  ): Promise<RestResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-deleteRelationship\", options);\n    try {\n      return this.client.digitalTwins.deleteRelationship(\n        digitalTwinId,\n        relationshipId,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the pagination of {@link listRelationships}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {DigitalTwinsListRelationshipsOptionalParams} [options] Common options for the iterative endpoints.\n   *\n   */\n  private async *listRelationshipsPage(\n    digitalTwinId: string,\n    options: OperationOptions,\n    continuationState: PageSettings\n  ): AsyncIterableIterator<DigitalTwinsListRelationshipsResponse> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: OperationOptions = {\n        ...options\n      };\n      const listRelationshipResponse = await this.client.digitalTwins.listRelationships(\n        digitalTwinId,\n        optionsComplete\n      );\n      continuationState.continuationToken = listRelationshipResponse.nextLink;\n      yield listRelationshipResponse;\n    }\n    while (continuationState.continuationToken) {\n      const listRelationshipResponse = await this.client.digitalTwins.listRelationshipsNext(\n        \"\",\n        continuationState.continuationToken,\n        options\n      );\n\n      continuationState.continuationToken = listRelationshipResponse.nextLink;\n      yield listRelationshipResponse;\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link listRelationships}.\n   * @param {DigitalTwinsListRelationshipsOptionalParams} [options] Common options for the iterative endpoints.\n   */\n  private async *listRelationshipsAll(\n    digitalTwinId: string,\n    options: OperationOptions\n  ): AsyncIterableIterator<any> {\n    for await (const page of this.listRelationshipsPage(digitalTwinId, options, {})) {\n      const value = page.value || [];\n      for (const item of value) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * Retrieve relationships for a digital twin.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   */\n  public listRelationships(\n    digitalTwinId: string,\n    options: OperationOptions & PageSettings = {}\n  ): PagedAsyncIterableIterator<any, DigitalTwinsListRelationshipsResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-listRelationships\", options);\n    try {\n      const iter = this.listRelationshipsAll(digitalTwinId, updatedOptions);\n\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: PageSettings = {}) =>\n          this.listRelationshipsPage(digitalTwinId, updatedOptions, settings)\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the pagination of {@link listIncomingRelationships}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {OperationOptions} [options] Common options for the iterative endpoints.\n   *\n   */\n  private async *listIncomingRelationshipsPage(\n    digitalTwinId: string,\n    options: OperationOptions,\n    continuationState: PageSettings\n  ): AsyncIterableIterator<DigitalTwinsListIncomingRelationshipsResponse> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: OperationOptions = {\n        ...options\n      };\n      const listIncomingRelationshipsResponse = await this.client.digitalTwins.listIncomingRelationships(\n        digitalTwinId,\n        optionsComplete\n      );\n      continuationState.continuationToken = listIncomingRelationshipsResponse.nextLink;\n      yield listIncomingRelationshipsResponse;\n    }\n    while (continuationState.continuationToken) {\n      const listIncomingRelationshipsResponse = await this.client.digitalTwins.listIncomingRelationshipsNext(\n        \"\",\n        continuationState.continuationToken,\n        options\n      );\n\n      continuationState.continuationToken = listIncomingRelationshipsResponse.nextLink;\n      yield listIncomingRelationshipsResponse;\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link listIncomingRelationships}.\n   * @param {OperationOptions} [options] Common options for the iterative endpoints.\n   */\n  private async *listIncomingRelationshipsAll(\n    digitalTwinId: string,\n    options: OperationOptions\n  ): AsyncIterableIterator<IncomingRelationship> {\n    for await (const page of this.listIncomingRelationshipsPage(digitalTwinId, options, {})) {\n      const value = page.value || [];\n      yield* value;\n    }\n  }\n\n  /**\n   * Retrieve all incoming relationships for a digital twin.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   */\n  public listIncomingRelationships(\n    digitalTwinId: string,\n    options: OperationOptions & PageSettings = {}\n  ): PagedAsyncIterableIterator<\n    IncomingRelationship,\n    DigitalTwinsListIncomingRelationshipsResponse\n  > {\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-listIncomingRelationships\",\n      options\n    );\n    try {\n      const iter = this.listIncomingRelationshipsAll(digitalTwinId, updatedOptions);\n\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: PageSettings = {}) =>\n          this.listIncomingRelationshipsPage(digitalTwinId, updatedOptions, settings)\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Publish telemetry from a digital twin, which is then consumed by one or many destination endpoints (subscribers) defined under.\n   *\n   * @param digitalTwinId The Id of the digital twin to delete.\n   * @param payload The application/json telemetry payload to be sent.\n   * @param messageId The message Id.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  public publishTelemetry(\n    digitalTwinId: string,\n    payload: any,\n    messageId: string,\n    options: OperationOptions = {}\n  ): Promise<RestResponse> {\n    const digitalTwinsSendTelemetryOptionalParams: DigitalTwinsSendTelemetryOptionalParams = options;\n    digitalTwinsSendTelemetryOptionalParams.telemetrySourceTime = new Date().toISOString();\n    if (!messageId) {\n      messageId = generateUuid();\n    }\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-publishTelemetry\",\n      digitalTwinsSendTelemetryOptionalParams\n    );\n    try {\n      return this.client.digitalTwins.sendTelemetry(\n        digitalTwinId,\n        payload,\n        messageId,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Publish telemetry from a digital twin's component, which is then consumed by one or many destination endpoints (subscribers) defined under.\n   *\n   * @param digitalTwinId The Id of the digital twin to delete.\n   * @param componentName The name of the DTDL component.\n   * @param payload The application/json telemetry payload to be sent.\n   * @param messageId The message Id.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  public publishComponentTelemetry(\n    digitalTwinId: string,\n    componentName: string,\n    payload: string,\n    messageId: string,\n    options: OperationOptions = {}\n  ): Promise<RestResponse> {\n    const digitalTwinsSendComponentTelemetryOptionalParams: DigitalTwinsSendComponentTelemetryOptionalParams = options;\n    digitalTwinsSendComponentTelemetryOptionalParams.telemetrySourceTime = new Date().toISOString();\n    if (!messageId) {\n      messageId = generateUuid();\n    }\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-publishComponentTelemetry\",\n      digitalTwinsSendComponentTelemetryOptionalParams\n    );\n    try {\n      return this.client.digitalTwins.sendComponentTelemetry(\n        digitalTwinId,\n        componentName,\n        payload,\n        messageId,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get a model, including the model metadata and the model definition.\n   *\n   * @param modelId The Id of the model.\n   * @param options Extended operation options including\n   *  includeModelDefinition: When true the model definition will be returned as part of the result. Default value: false.\n   * @returns The application/json model and the http response.\n   */\n  public getModel(\n    modelId: string,\n    includeModelDefinition: boolean = false,\n    options: OperationOptions = {}\n  ): Promise<DigitalTwinModelsGetByIdResponse> {\n    const digitalTwinModelsGetByIdOptionalParams: DigitalTwinModelsGetByIdOptionalParams = options;\n    digitalTwinModelsGetByIdOptionalParams.includeModelDefinition = includeModelDefinition;\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-getModel\",\n      digitalTwinModelsGetByIdOptionalParams\n    );\n    try {\n      return this.client.digitalTwinModels.getById(modelId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the pagination of {@link list}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {DigitalTwinModelsListOptionalParams} [options] Common options for the iterative endpoints.\n   *\n   */\n  private async *getModelsPage(\n    options: DigitalTwinModelsListOptionalParams,\n    continuationState: PageSettings\n  ): AsyncIterableIterator<DigitalTwinModelsListResponse> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: DigitalTwinModelsListOptionalParams = options;\n      optionsComplete.maxItemsPerPage = continuationState.maxPageSize;\n\n      const listResponse = await this.client.digitalTwinModels.list(optionsComplete);\n      continuationState.continuationToken = listResponse.nextLink;\n      yield listResponse;\n    }\n    while (continuationState.continuationToken) {\n      const listResponse = await this.client.digitalTwinModels.listNext(\n        continuationState.continuationToken,\n        options\n      );\n\n      continuationState.continuationToken = listResponse.nextLink;\n      yield listResponse;\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link list}.\n   * @param {DigitalTwinModelsListOptionalParams} [options] Common options for the iterative endpoints.\n   */\n  private async *getModelsAll(\n    options: DigitalTwinModelsListOptionalParams\n  ): AsyncIterableIterator<DigitalTwinsModelData> {\n    const f = {};\n\n    for await (const page of this.getModelsPage(options, f)) {\n      const value = page.value || [];\n      for (const item of value) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * Get the list of models\n   *\n   * @param dependeciesFor The model Ids to have dependencies retrieved. If omitted, all models are retrieved.\n   * @param includeModelDefinition Whether to include the model definition in the result. If false, only the model metadata will be returned.\n   * @param resultsPerPage The maximum number of items to retrieve per request. The server may choose to return less than the requested max.\n   * @returns A pageable set of application/json models and the http response.\n   */\n  public listModels(\n    dependeciesFor?: string[],\n    includeModelDefinition: boolean = false,\n    resultsPerPage?: number,\n    options: OperationOptions & PageSettings = {}\n  ): PagedAsyncIterableIterator<DigitalTwinsModelData, DigitalTwinModelsListResponse> {\n    var digitalTwinModelsListOptionalParams: DigitalTwinModelsListOptionalParams = options;\n    digitalTwinModelsListOptionalParams = {\n      maxItemsPerPage: resultsPerPage,\n      dependenciesFor: dependeciesFor,\n      includeModelDefinition: includeModelDefinition\n    };\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-listModels\",\n      digitalTwinModelsListOptionalParams\n    );\n    try {\n      const iter = this.getModelsAll(updatedOptions);\n\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: PageSettings = {}) =>\n          this.getModelsPage(digitalTwinModelsListOptionalParams, settings)\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Create one or many\n   *\n   * @param models The set of models to create. Each string corresponds to exactly one model.\n   * @param options The operation options\n   * @returns The created application/json models and the http response.\n   */\n  public createModels(\n    dtdlModels: any[],\n    options: OperationOptions = {}\n  ): Promise<DigitalTwinModelsAddResponse> {\n    const digitalTwinModelsAddOptionalParams: DigitalTwinModelsAddOptionalParams = options;\n    digitalTwinModelsAddOptionalParams.models = dtdlModels;\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-createModels\",\n      digitalTwinModelsAddOptionalParams\n    );\n    try {\n      return this.client.digitalTwinModels.add(updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Decommission a model using a json patch.\n   *\n   * @param modelId The Id of the model to decommission.\n   * property can be replaced.\n   * @param options The operation options\n   * @returns The http response.\n   * @summary When a model is decomissioned, new digital twins will no longer be able to be\n   * defined by this model. However, existing digital twins may continue to use this model.\n   * Once a model is decomissioned, it may not be recommissioned.\n   */\n  public decomissionModel(modelId: string, options: OperationOptions = {}): Promise<RestResponse> {\n    const jsonPatch = [{ op: \"replace\", path: \"/decommissioned\", value: true }];\n\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-decomissionModel\", options);\n    try {\n      return this.client.digitalTwinModels.update(modelId, jsonPatch, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete a model.\n   *\n   * @param modelId The Id of the model to delete.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  public deleteModel(modelId: string, options: OperationOptions = {}): Promise<RestResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-deleteModel\", options);\n    try {\n      return this.client.digitalTwinModels.delete(modelId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get an event route.\n   *\n   * @param modelId The Id of the event route.\n   * @param options The operation options\n   * @returns The application/json event route and the http response.\n   */\n  public getEventRoute(\n    eventRouteId: string,\n    options: OperationOptions = {}\n  ): Promise<EventRoutesGetByIdResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-getEventRoute\", options);\n    try {\n      return this.client.eventRoutes.getById(eventRouteId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the pagination of {@link list}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {EventRoutesListOptionalParams} [options] Common options for the iterative endpoints.\n   *\n   */\n  private async *getEventRoutesPage(\n    options: EventRoutesListOptionalParams,\n    continuationState: PageSettings\n  ): AsyncIterableIterator<EventRoutesListNextResponse> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: EventRoutesListOptionalParams = options;\n      optionsComplete.maxItemsPerPage = continuationState.maxPageSize;\n\n      const listResponse = await this.client.eventRoutes.list(optionsComplete);\n      continuationState.continuationToken = listResponse.nextLink;\n      yield listResponse;\n    }\n    while (continuationState.continuationToken) {\n      const listResponse = await this.client.eventRoutes.listNext(\n        continuationState.continuationToken,\n        options\n      );\n\n      continuationState.continuationToken = listResponse.nextLink;\n      yield listResponse;\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link list}.\n   * @param {EventRoutesListOptionalParams} [options] Common options for the iterative endpoints.\n   */\n  private async *getEventRoutesAll(\n    options: EventRoutesListOptionalParams\n  ): AsyncIterableIterator<EventRoute> {\n    const f = {};\n    for await (const page of this.getEventRoutesPage(options, f)) {\n      const value = page.value || [];\n      for (const item of value) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * List the event routes in a digital twins instance.\n   *\n   * @param resultsPerPage The maximum number of items to retrieve per request. The server may choose to return less than\n   * the requested max.\n   * @returns The application/json event route and the http response.\n   */\n  public listEventRoutes(\n    resultsPerPage?: number,\n    options: OperationOptions & PageSettings = {}\n  ): PagedAsyncIterableIterator<EventRoute, EventRoutesListNextResponse> {\n    var eventRoutesListOptionalParams: EventRoutesListOptionalParams = options;\n    eventRoutesListOptionalParams = {\n      maxItemsPerPage: resultsPerPage\n    };\n\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-listEventRoutes\",\n      eventRoutesListOptionalParams\n    );\n    try {\n      const iter = this.getEventRoutesAll(updatedOptions);\n\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: PageSettings = {}) =>\n          this.getEventRoutesPage(eventRoutesListOptionalParams, settings)\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Create or update an event route.\n   *\n   * @param eventRouteId The Id of the event route to create or update.\n   * @param endpointId The id of the endpoint this event route is bound to.\n   * @param filter An expression which describes the events which are routed to the endpoint.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  public upsertEventRoute(\n    eventRouteId: string,\n    endpointId: string,\n    filter: string,\n    options: OperationOptions = {}\n  ): Promise<RestResponse> {\n    const eventRoutesAddOptionalParams: EventRoutesAddOptionalParams = options;\n    const eventRoute: EventRoute = {\n      endpointName: endpointId,\n      filter: filter\n    };\n    eventRoutesAddOptionalParams.eventRoute = eventRoute;\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-upsertEventRoute\",\n      eventRoutesAddOptionalParams\n    );\n    try {\n      return this.client.eventRoutes.add(eventRouteId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete an event route.\n   *\n   * @param eventRouteId The Id of the eventRoute to delete.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  public deleteEventRoute(\n    eventRouteId: string,\n    options: OperationOptions = {}\n  ): Promise<RestResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-deleteEventRoute\", options);\n    try {\n      return this.client.eventRoutes.delete(eventRouteId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the pagination of {@link query}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {OperationOptions} [options] Common options for the iterative endpoints.\n   *\n   */\n  private async *queryTwinsPage(\n    query: string,\n    options: QueryQueryTwinsOptionalParams,\n    continuationState: PageSettings\n  ): AsyncIterableIterator<QueryQueryTwinsResponse> {\n    if (continuationState.continuationToken == null) {\n      const querySpecification: QuerySpecification = {\n        query: query,\n        continuationToken: continuationState.continuationToken\n      };\n      const queryResult = await this.client.query.queryTwins(querySpecification, options);\n      continuationState.continuationToken = queryResult.continuationToken;\n      yield queryResult;\n    }\n    while (continuationState.continuationToken) {\n      const querySpecification: QuerySpecification = {\n        query: query,\n        continuationToken: continuationState.continuationToken\n      };\n      const queryResult = await this.client.query.queryTwins(querySpecification, options);\n\n      continuationState.continuationToken = queryResult.continuationToken;\n      yield queryResult;\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link query}.\n   * @param {OperationOptions} [options] Common options for the iterative endpoints.\n   */\n  private async *queryTwinsAll(\n    query: string,\n    options: QueryQueryTwinsOptionalParams\n  ): AsyncIterableIterator<any> {\n    const f = {};\n\n    for await (const page of this.queryTwinsPage(query, options, f)) {\n      if (page.value) {\n        for (const item of page.value) {\n          yield item;\n        }\n      }\n    }\n  }\n\n  /**\n   * Query for digital twins.\n   *\n   * @param query The query string, in SQL-like syntax.\n   * @param resultsPerPage The maximum number of items to retrieve per request. The server may choose to return less than the requested max.\n   * @returns The pageable list of query results.\n   */\n  public queryTwins(\n    query: string,\n    resultsPerPage?: number,\n    options: OperationOptions & PageSettings = {}\n  ): PagedAsyncIterableIterator<any, QueryQueryTwinsResponse> {\n    var queryQueryTwinsOptionalParams: QueryQueryTwinsOptionalParams = options;\n    queryQueryTwinsOptionalParams = {\n      maxItemsPerPage: resultsPerPage\n    };\n\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-queryTwins\",\n      queryQueryTwinsOptionalParams\n    );\n    try {\n      const iter = this.queryTwinsAll(query, updatedOptions);\n\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: PageSettings = {}) =>\n          this.queryTwinsPage(query, queryQueryTwinsOptionalParams, settings)\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n"]}