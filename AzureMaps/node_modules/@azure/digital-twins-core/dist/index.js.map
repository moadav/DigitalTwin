{"version":3,"file":"index.js","sources":["../src/generated/models/mappers.ts","../src/generated/models/parameters.ts","../src/generated/operations/digitalTwinModels.ts","../src/generated/operations/query.ts","../src/generated/operations/digitalTwins.ts","../src/generated/operations/eventRoutes.ts","../src/generated/azureDigitalTwinsAPIContext.ts","../src/generated/azureDigitalTwinsAPI.ts","../src/tracing.ts","../src/logger.ts","../src/digitalTwinsClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const DigitalTwinsModelData: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DigitalTwinsModelData\",\n    modelProperties: {\n      displayName: {\n        serializedName: \"displayName\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      uploadTime: {\n        serializedName: \"uploadTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      decommissioned: {\n        serializedName: \"decommissioned\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      model: {\n        serializedName: \"model\",\n        type: {\n          name: \"any\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorResponse: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorResponse\",\n    modelProperties: {\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorModel\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorModel: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"ErrorModel\" } }\n        }\n      },\n      innererror: {\n        serializedName: \"innererror\",\n        type: {\n          name: \"Composite\",\n          className: \"InnerError\"\n        }\n      }\n    }\n  }\n};\n\nexport const InnerError: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"InnerError\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innererror: {\n        serializedName: \"innererror\",\n        type: {\n          name: \"Composite\",\n          className: \"InnerError\"\n        }\n      }\n    }\n  }\n};\n\nexport const PagedDigitalTwinsModelDataCollection: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PagedDigitalTwinsModelDataCollection\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Composite\", className: \"DigitalTwinsModelData\" }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const QuerySpecification: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"QuerySpecification\",\n    modelProperties: {\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\"\n        }\n      },\n      continuationToken: {\n        serializedName: \"continuationToken\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const QueryResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"QueryResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"any\" } }\n        }\n      },\n      continuationToken: {\n        serializedName: \"continuationToken\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RelationshipCollection: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelationshipCollection\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"any\" } }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const IncomingRelationshipCollection: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IncomingRelationshipCollection\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Composite\", className: \"IncomingRelationship\" }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const IncomingRelationship: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IncomingRelationship\",\n    modelProperties: {\n      relationshipId: {\n        serializedName: \"$relationshipId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sourceId: {\n        serializedName: \"$sourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      relationshipName: {\n        serializedName: \"$relationshipName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      relationshipLink: {\n        serializedName: \"$relationshipLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventRouteCollection: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EventRouteCollection\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"EventRoute\" } }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventRoute: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EventRoute\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      endpointName: {\n        serializedName: \"endpointName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      filter: {\n        serializedName: \"filter\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const QueryQueryTwinsHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"QueryQueryTwinsHeaders\",\n    modelProperties: {\n      queryCharge: {\n        serializedName: \"query-charge\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DigitalTwinsGetByIdHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DigitalTwinsGetByIdHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DigitalTwinsAddHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DigitalTwinsAddHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DigitalTwinsUpdateHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DigitalTwinsUpdateHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DigitalTwinsGetRelationshipByIdHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DigitalTwinsGetRelationshipByIdHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DigitalTwinsAddRelationshipHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DigitalTwinsAddRelationshipHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DigitalTwinsUpdateRelationshipHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DigitalTwinsUpdateRelationshipHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DigitalTwinsGetComponentHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DigitalTwinsGetComponentHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DigitalTwinsUpdateComponentHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DigitalTwinsUpdateComponentHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n  QueryCollectionFormat\n} from \"@azure/core-http\";\nimport {\n  QuerySpecification as QuerySpecificationMapper,\n  EventRoute as EventRouteMapper\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const models: OperationParameter = {\n  parameterPath: [\"options\", \"models\"],\n  mapper: {\n    constraints: {\n      MinItems: 1,\n      UniqueItems: true\n    },\n    serializedName: \"models\",\n    type: {\n      name: \"Sequence\",\n      element: { type: { name: \"any\" } }\n    }\n  }\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const traceparent: OperationParameter = {\n  parameterPath: [\"options\", \"traceparent\"],\n  mapper: {\n    serializedName: \"traceparent\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const tracestate: OperationParameter = {\n  parameterPath: [\"options\", \"tracestate\"],\n  mapper: {\n    serializedName: \"tracestate\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const apiVersion: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    defaultValue: \"2020-10-31\",\n    isConstant: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const dependenciesFor: OperationQueryParameter = {\n  parameterPath: [\"options\", \"dependenciesFor\"],\n  mapper: {\n    serializedName: \"dependenciesFor\",\n    type: {\n      name: \"Sequence\",\n      element: { type: { name: \"String\" } }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const includeModelDefinition: OperationQueryParameter = {\n  parameterPath: [\"options\", \"includeModelDefinition\"],\n  mapper: {\n    serializedName: \"includeModelDefinition\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const maxItemsPerPage: OperationParameter = {\n  parameterPath: [\"options\", \"maxItemsPerPage\"],\n  mapper: {\n    serializedName: \"max-items-per-page\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const id: OperationURLParameter = {\n  parameterPath: \"id\",\n  mapper: {\n    serializedName: \"id\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType1: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json-patch+json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const updateModel: OperationParameter = {\n  parameterPath: \"updateModel\",\n  mapper: {\n    serializedName: \"updateModel\",\n    required: true,\n    type: {\n      name: \"Sequence\",\n      element: { type: { name: \"any\" } }\n    }\n  }\n};\n\nexport const nextLink: OperationURLParameter = {\n  parameterPath: \"nextLink\",\n  mapper: {\n    serializedName: \"nextLink\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const querySpecification: OperationParameter = {\n  parameterPath: \"querySpecification\",\n  mapper: QuerySpecificationMapper\n};\n\nexport const twin: OperationParameter = {\n  parameterPath: \"twin\",\n  mapper: {\n    serializedName: \"twin\",\n    required: true,\n    type: {\n      name: \"any\"\n    }\n  }\n};\n\nexport const ifNoneMatch: OperationParameter = {\n  parameterPath: [\"options\", \"ifNoneMatch\"],\n  mapper: {\n    serializedName: \"If-None-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const ifMatch: OperationParameter = {\n  parameterPath: [\"options\", \"ifMatch\"],\n  mapper: {\n    serializedName: \"If-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const patchDocument: OperationParameter = {\n  parameterPath: \"patchDocument\",\n  mapper: {\n    serializedName: \"patchDocument\",\n    required: true,\n    type: {\n      name: \"Sequence\",\n      element: { type: { name: \"any\" } }\n    }\n  }\n};\n\nexport const relationshipId: OperationURLParameter = {\n  parameterPath: \"relationshipId\",\n  mapper: {\n    serializedName: \"relationshipId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const relationship: OperationParameter = {\n  parameterPath: \"relationship\",\n  mapper: {\n    serializedName: \"relationship\",\n    required: true,\n    type: {\n      name: \"any\"\n    }\n  }\n};\n\nexport const relationshipName: OperationQueryParameter = {\n  parameterPath: [\"options\", \"relationshipName\"],\n  mapper: {\n    serializedName: \"relationshipName\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const telemetry: OperationParameter = {\n  parameterPath: \"telemetry\",\n  mapper: {\n    serializedName: \"telemetry\",\n    required: true,\n    type: {\n      name: \"any\"\n    }\n  }\n};\n\nexport const messageId: OperationParameter = {\n  parameterPath: \"messageId\",\n  mapper: {\n    serializedName: \"Message-Id\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const telemetrySourceTime: OperationParameter = {\n  parameterPath: [\"options\", \"telemetrySourceTime\"],\n  mapper: {\n    serializedName: \"Telemetry-Source-Time\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const componentPath: OperationURLParameter = {\n  parameterPath: \"componentPath\",\n  mapper: {\n    serializedName: \"componentPath\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const eventRoute: OperationParameter = {\n  parameterPath: [\"options\", \"eventRoute\"],\n  mapper: EventRouteMapper\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { AzureDigitalTwinsAPI } from \"../azureDigitalTwinsAPI\";\nimport {\n  DigitalTwinModelsAddOptionalParams,\n  DigitalTwinModelsAddResponse,\n  DigitalTwinModelsListOptionalParams,\n  DigitalTwinModelsListResponse,\n  DigitalTwinModelsGetByIdOptionalParams,\n  DigitalTwinModelsGetByIdResponse,\n  DigitalTwinModelsUpdateOptionalParams,\n  DigitalTwinModelsDeleteOptionalParams,\n  DigitalTwinModelsListNextOptionalParams,\n  DigitalTwinModelsListNextResponse\n} from \"../models\";\n\n/**\n * Class representing a DigitalTwinModels.\n */\nexport class DigitalTwinModels {\n  private readonly client: AzureDigitalTwinsAPI;\n\n  /**\n   * Initialize a new instance of the class DigitalTwinModels class.\n   * @param client Reference to the service client\n   */\n  constructor(client: AzureDigitalTwinsAPI) {\n    this.client = client;\n  }\n\n  /**\n   * Uploads one or more models. When any error occurs, no models are uploaded.\n   * Status codes:\n   * * 201 Created\n   * * 400 Bad Request\n   *   * DTDLParserError - The models provided are not valid DTDL.\n   *   * InvalidArgument - The model id is invalid.\n   *   * LimitExceeded - The maximum number of model ids allowed in 'dependenciesFor' has been reached.\n   *   * ModelVersionNotSupported - The version of DTDL used is not supported.\n   * * 409 Conflict\n   *   * ModelAlreadyExists - The model provided already exists.\n   * @param options The options parameters.\n   */\n  add(\n    options?: DigitalTwinModelsAddOptionalParams\n  ): Promise<DigitalTwinModelsAddResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { options: operationOptions },\n      addOperationSpec\n    ) as Promise<DigitalTwinModelsAddResponse>;\n  }\n\n  /**\n   * Retrieves model metadata and, optionally, model definitions.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The model id is invalid.\n   *   * LimitExceeded - The maximum number of model ids allowed in 'dependenciesFor' has been reached.\n   * * 404 Not Found\n   *   * ModelNotFound - The model was not found.\n   * @param options The options parameters.\n   */\n  list(\n    options?: DigitalTwinModelsListOptionalParams\n  ): Promise<DigitalTwinModelsListResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { options: operationOptions },\n      listOperationSpec\n    ) as Promise<DigitalTwinModelsListResponse>;\n  }\n\n  /**\n   * Retrieves model metadata and optionally the model definition.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The model id is invalid.\n   *   * MissingArgument - The model id was not provided.\n   * * 404 Not Found\n   *   * ModelNotFound - The model was not found.\n   * @param id The id for the model. The id is globally unique and case sensitive.\n   * @param options The options parameters.\n   */\n  getById(\n    id: string,\n    options?: DigitalTwinModelsGetByIdOptionalParams\n  ): Promise<DigitalTwinModelsGetByIdResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, options: operationOptions },\n      getByIdOperationSpec\n    ) as Promise<DigitalTwinModelsGetByIdResponse>;\n  }\n\n  /**\n   * Updates the metadata for a model.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The model id is invalid.\n   *   * JsonPatchInvalid - The JSON Patch provided is invalid.\n   *   * MissingArgument - The model id was not provided.\n   * * 404 Not Found\n   *   * ModelNotFound - The model was not found.\n   * * 409 Conflict\n   *   * ModelReferencesNotDecommissioned - The model refers to models that are not decommissioned.\n   * @param id The id for the model. The id is globally unique and case sensitive.\n   * @param updateModel An update specification described by JSON Patch. Only the decommissioned property\n   *                    can be replaced.\n   * @param options The options parameters.\n   */\n  update(\n    id: string,\n    updateModel: any[],\n    options?: DigitalTwinModelsUpdateOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, updateModel, options: operationOptions },\n      updateOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Deletes a model. A model can only be deleted if no other models reference it.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The model id is invalid.\n   *   * MissingArgument - The model id was not provided.\n   * * 404 Not Found\n   *   * ModelNotFound - The model was not found.\n   * * 409 Conflict\n   *   * ModelReferencesNotDeleted - The model refers to models that are not deleted.\n   * @param id The id for the model. The id is globally unique and case sensitive.\n   * @param options The options parameters.\n   */\n  delete(\n    id: string,\n    options?: DigitalTwinModelsDeleteOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, options: operationOptions },\n      deleteOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  listNext(\n    nextLink: string,\n    options?: DigitalTwinModelsListNextOptionalParams\n  ): Promise<DigitalTwinModelsListNextResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { nextLink, options: operationOptions },\n      listNextOperationSpec\n    ) as Promise<DigitalTwinModelsListNextResponse>;\n  }\n}\n// Operation Specifications\n\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst addOperationSpec: coreHttp.OperationSpec = {\n  path: \"/models\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Composite\", className: \"DigitalTwinsModelData\" }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.models,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.traceparent,\n    Parameters.tracestate\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst listOperationSpec: coreHttp.OperationSpec = {\n  path: \"/models\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PagedDigitalTwinsModelDataCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.dependenciesFor,\n    Parameters.includeModelDefinition\n  ],\n  urlParameters: [Parameters.$host],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.maxItemsPerPage\n  ],\n  serializer\n};\nconst getByIdOperationSpec: coreHttp.OperationSpec = {\n  path: \"/models/{id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DigitalTwinsModelData\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.includeModelDefinition],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst updateOperationSpec: coreHttp.OperationSpec = {\n  path: \"/models/{id}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.updateModel,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.contentType1\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/models/{id}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst listNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PagedDigitalTwinsModelDataCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.dependenciesFor,\n    Parameters.includeModelDefinition\n  ],\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.maxItemsPerPage\n  ],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { AzureDigitalTwinsAPI } from \"../azureDigitalTwinsAPI\";\nimport {\n  QuerySpecification,\n  QueryQueryTwinsOptionalParams,\n  QueryQueryTwinsResponse\n} from \"../models\";\n\n/**\n * Class representing a Query.\n */\nexport class Query {\n  private readonly client: AzureDigitalTwinsAPI;\n\n  /**\n   * Initialize a new instance of the class Query class.\n   * @param client Reference to the service client\n   */\n  constructor(client: AzureDigitalTwinsAPI) {\n    this.client = client;\n  }\n\n  /**\n   * Executes a query that allows traversing relationships and filtering by property values.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * BadRequest - The continuation token is invalid.\n   *   * SqlQueryError - The query contains some errors.\n   * * 429 Too Many Requests\n   *   * QuotaReachedError - The maximum query rate limit has been reached.\n   * @param querySpecification The query specification to execute.\n   * @param options The options parameters.\n   */\n  queryTwins(\n    querySpecification: QuerySpecification,\n    options?: QueryQueryTwinsOptionalParams\n  ): Promise<QueryQueryTwinsResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { querySpecification, options: operationOptions },\n      queryTwinsOperationSpec\n    ) as Promise<QueryQueryTwinsResponse>;\n  }\n}\n// Operation Specifications\n\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst queryTwinsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/query\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.QueryResult,\n      headersMapper: Mappers.QueryQueryTwinsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.querySpecification,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.maxItemsPerPage\n  ],\n  mediaType: \"json\",\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { AzureDigitalTwinsAPI } from \"../azureDigitalTwinsAPI\";\nimport {\n  DigitalTwinsGetByIdOptionalParams,\n  DigitalTwinsGetByIdResponse,\n  DigitalTwinsAddOptionalParams,\n  DigitalTwinsAddResponse,\n  DigitalTwinsDeleteOptionalParams,\n  DigitalTwinsUpdateOptionalParams,\n  DigitalTwinsUpdateResponse,\n  DigitalTwinsGetRelationshipByIdOptionalParams,\n  DigitalTwinsGetRelationshipByIdResponse,\n  DigitalTwinsAddRelationshipOptionalParams,\n  DigitalTwinsAddRelationshipResponse,\n  DigitalTwinsDeleteRelationshipOptionalParams,\n  DigitalTwinsUpdateRelationshipOptionalParams,\n  DigitalTwinsUpdateRelationshipResponse,\n  DigitalTwinsListRelationshipsOptionalParams,\n  DigitalTwinsListRelationshipsResponse,\n  DigitalTwinsListIncomingRelationshipsOptionalParams,\n  DigitalTwinsListIncomingRelationshipsResponse,\n  DigitalTwinsSendTelemetryOptionalParams,\n  DigitalTwinsSendComponentTelemetryOptionalParams,\n  DigitalTwinsGetComponentOptionalParams,\n  DigitalTwinsGetComponentResponse,\n  DigitalTwinsUpdateComponentOptionalParams,\n  DigitalTwinsUpdateComponentResponse,\n  DigitalTwinsListRelationshipsNextOptionalParams,\n  DigitalTwinsListRelationshipsNextResponse,\n  DigitalTwinsListIncomingRelationshipsNextOptionalParams,\n  DigitalTwinsListIncomingRelationshipsNextResponse\n} from \"../models\";\n\n/**\n * Class representing a DigitalTwins.\n */\nexport class DigitalTwins {\n  private readonly client: AzureDigitalTwinsAPI;\n\n  /**\n   * Initialize a new instance of the class DigitalTwins class.\n   * @param client Reference to the service client\n   */\n  constructor(client: AzureDigitalTwinsAPI) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  getById(\n    id: string,\n    options?: DigitalTwinsGetByIdOptionalParams\n  ): Promise<DigitalTwinsGetByIdResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, options: operationOptions },\n      getByIdOperationSpec\n    ) as Promise<DigitalTwinsGetByIdResponse>;\n  }\n\n  /**\n   * Adds or replaces a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or payload is invalid.\n   *   * ModelDecommissioned - The model for the digital twin is decommissioned.\n   *   * TwinLimitReached - The maximum number of digital twins allowed has been reached.\n   *   * ValidationFailed - The digital twin payload is not valid.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param twin The digital twin instance being added. If provided, the $dtId property is ignored.\n   * @param options The options parameters.\n   */\n  add(\n    id: string,\n    twin: any,\n    options?: DigitalTwinsAddOptionalParams\n  ): Promise<DigitalTwinsAddResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, twin, options: operationOptions },\n      addOperationSpec\n    ) as Promise<DigitalTwinsAddResponse>;\n  }\n\n  /**\n   * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id is invalid.\n   *   * RelationshipsNotDeleted - The digital twin contains relationships.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  delete(\n    id: string,\n    options?: DigitalTwinsDeleteOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, options: operationOptions },\n      deleteOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Updates a digital twin.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or payload is invalid.\n   *   * JsonPatchInvalid - The JSON Patch provided is invalid.\n   *   * ValidationFailed - Applying the patch results in an invalid digital twin.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param patchDocument An update specification described by JSON Patch. Updates to property values and\n   *                      $model elements may happen in the same request. Operations are limited to add, replace and remove.\n   * @param options The options parameters.\n   */\n  update(\n    id: string,\n    patchDocument: any[],\n    options?: DigitalTwinsUpdateOptionalParams\n  ): Promise<DigitalTwinsUpdateResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, patchDocument, options: operationOptions },\n      updateOperationSpec\n    ) as Promise<DigitalTwinsUpdateResponse>;\n  }\n\n  /**\n   * Retrieves a relationship between two digital twins.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or relationship id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * RelationshipNotFound - The relationship was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case\n   *                       sensitive.\n   * @param options The options parameters.\n   */\n  getRelationshipById(\n    id: string,\n    relationshipId: string,\n    options?: DigitalTwinsGetRelationshipByIdOptionalParams\n  ): Promise<DigitalTwinsGetRelationshipByIdResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, relationshipId, options: operationOptions },\n      getRelationshipByIdOperationSpec\n    ) as Promise<DigitalTwinsGetRelationshipByIdResponse>;\n  }\n\n  /**\n   * Adds a relationship between two digital twins.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id, relationship id, or payload is invalid.\n   *   * InvalidRelationship - The relationship is invalid.\n   *   * OperationNotAllowed - The relationship cannot connect to the same digital twin.\n   *   * ValidationFailed - The relationship content is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * TargetTwinNotFound - The digital twin target of the relationship was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case\n   *                       sensitive.\n   * @param relationship The data for the relationship.\n   * @param options The options parameters.\n   */\n  addRelationship(\n    id: string,\n    relationshipId: string,\n    relationship: any,\n    options?: DigitalTwinsAddRelationshipOptionalParams\n  ): Promise<DigitalTwinsAddRelationshipResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, relationshipId, relationship, options: operationOptions },\n      addRelationshipOperationSpec\n    ) as Promise<DigitalTwinsAddRelationshipResponse>;\n  }\n\n  /**\n   * Deletes a relationship between two digital twins.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or relationship id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * RelationshipNotFound - The relationship was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case\n   *                       sensitive.\n   * @param options The options parameters.\n   */\n  deleteRelationship(\n    id: string,\n    relationshipId: string,\n    options?: DigitalTwinsDeleteRelationshipOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, relationshipId, options: operationOptions },\n      deleteRelationshipOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Updates the properties on a relationship between two digital twins.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or relationship id is invalid.\n   *   * InvalidRelationship - The relationship is invalid.\n   *   * JsonPatchInvalid - The JSON Patch provided is invalid.\n   *   * ValidationFailed - The relationship content is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * RelationshipNotFound - The relationship was not found.\n   * * 409 Conflict\n   *   * RelationshipAlreadyExists - The relationship already exists.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case\n   *                       sensitive.\n   * @param patchDocument JSON Patch description of the update to the relationship properties.\n   * @param options The options parameters.\n   */\n  updateRelationship(\n    id: string,\n    relationshipId: string,\n    patchDocument: any[],\n    options?: DigitalTwinsUpdateRelationshipOptionalParams\n  ): Promise<DigitalTwinsUpdateRelationshipResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, relationshipId, patchDocument, options: operationOptions },\n      updateRelationshipOperationSpec\n    ) as Promise<DigitalTwinsUpdateRelationshipResponse>;\n  }\n\n  /**\n   * Retrieves the relationships from a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  listRelationships(\n    id: string,\n    options?: DigitalTwinsListRelationshipsOptionalParams\n  ): Promise<DigitalTwinsListRelationshipsResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, options: operationOptions },\n      listRelationshipsOperationSpec\n    ) as Promise<DigitalTwinsListRelationshipsResponse>;\n  }\n\n  /**\n   * Retrieves all incoming relationship for a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  listIncomingRelationships(\n    id: string,\n    options?: DigitalTwinsListIncomingRelationshipsOptionalParams\n  ): Promise<DigitalTwinsListIncomingRelationshipsResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, options: operationOptions },\n      listIncomingRelationshipsOperationSpec\n    ) as Promise<DigitalTwinsListIncomingRelationshipsResponse>;\n  }\n\n  /**\n   * Sends telemetry on behalf of a digital twin.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or message id is invalid.\n   *   * ValidationFailed - The telemetry content is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param messageId A unique message identifier (in the scope of the digital twin id) that is commonly\n   *                  used for de-duplicating messages.\n   * @param telemetry The telemetry measurements to send from the digital twin.\n   * @param options The options parameters.\n   */\n  sendTelemetry(\n    id: string,\n    messageId: string,\n    telemetry: any,\n    options?: DigitalTwinsSendTelemetryOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, messageId, telemetry, options: operationOptions },\n      sendTelemetryOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Sends telemetry on behalf of a component in a digital twin.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id, message id, or component path is invalid.\n   *   * ValidationFailed - The telemetry content is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * ComponentNotFound - The component path was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param componentPath The name of the DTDL component.\n   * @param messageId A unique message identifier (in the scope of the digital twin id) that is commonly\n   *                  used for de-duplicating messages.\n   * @param telemetry The telemetry measurements to send from the digital twin's component.\n   * @param options The options parameters.\n   */\n  sendComponentTelemetry(\n    id: string,\n    componentPath: string,\n    messageId: string,\n    telemetry: any,\n    options?: DigitalTwinsSendComponentTelemetryOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, componentPath, messageId, telemetry, options: operationOptions },\n      sendComponentTelemetryOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Retrieves a component from a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or component path is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * ComponentNotFound - The component path was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param componentPath The name of the DTDL component.\n   * @param options The options parameters.\n   */\n  getComponent(\n    id: string,\n    componentPath: string,\n    options?: DigitalTwinsGetComponentOptionalParams\n  ): Promise<DigitalTwinsGetComponentResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, componentPath, options: operationOptions },\n      getComponentOperationSpec\n    ) as Promise<DigitalTwinsGetComponentResponse>;\n  }\n\n  /**\n   * Updates a component on a digital twin.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id, component path, or payload is invalid.\n   *   * JsonPatchInvalid - The JSON Patch provided is invalid.\n   *   * ValidationFailed - Applying the patch results in an invalid digital twin.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param componentPath The name of the DTDL component.\n   * @param patchDocument An update specification described by JSON Patch. Updates to property values and\n   *                      $model elements may happen in the same request. Operations are limited to add, replace and remove.\n   * @param options The options parameters.\n   */\n  updateComponent(\n    id: string,\n    componentPath: string,\n    patchDocument: any[],\n    options?: DigitalTwinsUpdateComponentOptionalParams\n  ): Promise<DigitalTwinsUpdateComponentResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, componentPath, patchDocument, options: operationOptions },\n      updateComponentOperationSpec\n    ) as Promise<DigitalTwinsUpdateComponentResponse>;\n  }\n\n  /**\n   * ListRelationshipsNext\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param nextLink The nextLink from the previous successful call to the ListRelationships method.\n   * @param options The options parameters.\n   */\n  listRelationshipsNext(\n    id: string,\n    nextLink: string,\n    options?: DigitalTwinsListRelationshipsNextOptionalParams\n  ): Promise<DigitalTwinsListRelationshipsNextResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, nextLink, options: operationOptions },\n      listRelationshipsNextOperationSpec\n    ) as Promise<DigitalTwinsListRelationshipsNextResponse>;\n  }\n\n  /**\n   * ListIncomingRelationshipsNext\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param nextLink The nextLink from the previous successful call to the ListIncomingRelationships\n   *                 method.\n   * @param options The options parameters.\n   */\n  listIncomingRelationshipsNext(\n    id: string,\n    nextLink: string,\n    options?: DigitalTwinsListIncomingRelationshipsNextOptionalParams\n  ): Promise<DigitalTwinsListIncomingRelationshipsNextResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, nextLink, options: operationOptions },\n      listIncomingRelationshipsNextOperationSpec\n    ) as Promise<DigitalTwinsListIncomingRelationshipsNextResponse>;\n  }\n}\n// Operation Specifications\n\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst getByIdOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n      headersMapper: Mappers.DigitalTwinsGetByIdHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst addOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n      headersMapper: Mappers.DigitalTwinsAddHeaders\n    },\n    202: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.twin,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.ifNoneMatch\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.ifMatch\n  ],\n  serializer\n};\nconst updateOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    202: {},\n    204: {\n      headersMapper: Mappers.DigitalTwinsUpdateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.patchDocument,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.contentType1,\n    Parameters.ifMatch\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst getRelationshipByIdOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/relationships/{relationshipId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n      headersMapper: Mappers.DigitalTwinsGetRelationshipByIdHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst addRelationshipOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/relationships/{relationshipId}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n      headersMapper: Mappers.DigitalTwinsAddRelationshipHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.relationship,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.ifNoneMatch\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteRelationshipOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/relationships/{relationshipId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.ifMatch\n  ],\n  serializer\n};\nconst updateRelationshipOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/relationships/{relationshipId}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    204: {\n      headersMapper: Mappers.DigitalTwinsUpdateRelationshipHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.patchDocument,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.contentType1,\n    Parameters.ifMatch\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst listRelationshipsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/relationships\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RelationshipCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.relationshipName],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst listIncomingRelationshipsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/incomingrelationships\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IncomingRelationshipCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst sendTelemetryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/telemetry\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.telemetry,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.messageId,\n    Parameters.telemetrySourceTime\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst sendComponentTelemetryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/components/{componentPath}/telemetry\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.telemetry,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.componentPath],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.messageId,\n    Parameters.telemetrySourceTime\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst getComponentOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/components/{componentPath}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n      headersMapper: Mappers.DigitalTwinsGetComponentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.componentPath],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst updateComponentOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/components/{componentPath}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    202: {},\n    204: {\n      headersMapper: Mappers.DigitalTwinsUpdateComponentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.patchDocument,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.componentPath],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.contentType1,\n    Parameters.ifMatch\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst listRelationshipsNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RelationshipCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.relationshipName],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.nextLink],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst listIncomingRelationshipsNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IncomingRelationshipCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.nextLink],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { AzureDigitalTwinsAPI } from \"../azureDigitalTwinsAPI\";\nimport {\n  EventRoutesListOptionalParams,\n  EventRoutesListResponse,\n  EventRoutesGetByIdOptionalParams,\n  EventRoutesGetByIdResponse,\n  EventRoutesAddOptionalParams,\n  EventRoutesDeleteOptionalParams,\n  EventRoutesListNextOptionalParams,\n  EventRoutesListNextResponse\n} from \"../models\";\n\n/**\n * Class representing a EventRoutes.\n */\nexport class EventRoutes {\n  private readonly client: AzureDigitalTwinsAPI;\n\n  /**\n   * Initialize a new instance of the class EventRoutes class.\n   * @param client Reference to the service client\n   */\n  constructor(client: AzureDigitalTwinsAPI) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves all event routes.\n   * Status codes:\n   * * 200 OK\n   * @param options The options parameters.\n   */\n  list(\n    options?: EventRoutesListOptionalParams\n  ): Promise<EventRoutesListResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { options: operationOptions },\n      listOperationSpec\n    ) as Promise<EventRoutesListResponse>;\n  }\n\n  /**\n   * Retrieves an event route.\n   * Status codes:\n   * * 200 OK\n   * * 404 Not Found\n   *   * EventRouteNotFound - The event route was not found.\n   * @param id The id for an event route. The id is unique within event routes and case sensitive.\n   * @param options The options parameters.\n   */\n  getById(\n    id: string,\n    options?: EventRoutesGetByIdOptionalParams\n  ): Promise<EventRoutesGetByIdResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, options: operationOptions },\n      getByIdOperationSpec\n    ) as Promise<EventRoutesGetByIdResponse>;\n  }\n\n  /**\n   * Adds or replaces an event route.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * EventRouteEndpointInvalid - The endpoint provided does not exist or is not active.\n   *   * EventRouteFilterInvalid - The event route filter is invalid.\n   *   * EventRouteIdInvalid - The event route id is invalid.\n   *   * LimitExceeded - The maximum number of event routes allowed has been reached.\n   * @param id The id for an event route. The id is unique within event routes and case sensitive.\n   * @param options The options parameters.\n   */\n  add(\n    id: string,\n    options?: EventRoutesAddOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, options: operationOptions },\n      addOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Deletes an event route.\n   * Status codes:\n   * * 204 No Content\n   * * 404 Not Found\n   *   * EventRouteNotFound - The event route was not found.\n   * @param id The id for an event route. The id is unique within event routes and case sensitive.\n   * @param options The options parameters.\n   */\n  delete(\n    id: string,\n    options?: EventRoutesDeleteOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, options: operationOptions },\n      deleteOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  listNext(\n    nextLink: string,\n    options?: EventRoutesListNextOptionalParams\n  ): Promise<EventRoutesListNextResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { nextLink, options: operationOptions },\n      listNextOperationSpec\n    ) as Promise<EventRoutesListNextResponse>;\n  }\n}\n// Operation Specifications\n\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreHttp.OperationSpec = {\n  path: \"/eventroutes\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventRouteCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.maxItemsPerPage\n  ],\n  serializer\n};\nconst getByIdOperationSpec: coreHttp.OperationSpec = {\n  path: \"/eventroutes/{id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventRoute\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst addOperationSpec: coreHttp.OperationSpec = {\n  path: \"/eventroutes/{id}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.eventRoute,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.traceparent,\n    Parameters.tracestate\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/eventroutes/{id}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst listNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventRouteCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.maxItemsPerPage\n  ],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport { AzureDigitalTwinsAPIOptionalParams } from \"./models\";\n\nconst packageName = \"@azure/digital-twins-core\";\nconst packageVersion = \"1.0.3\";\n\nexport class AzureDigitalTwinsAPIContext extends coreHttp.ServiceClient {\n  $host: string;\n  apiVersion: string;\n\n  /**\n   * Initializes a new instance of the AzureDigitalTwinsAPIContext class.\n   * @param options The parameter options\n   */\n  constructor(options?: AzureDigitalTwinsAPIOptionalParams) {\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(undefined, options);\n\n    this.requestContentType = \"application/json; charset=utf-8\";\n\n    this.baseUri =\n      options.endpoint || \"https://digitaltwins-name.digitaltwins.azure.net\";\n\n    // Assigning values to Constant parameters\n    this.$host =\n      options.$host || \"https://digitaltwins-name.digitaltwins.azure.net\";\n    this.apiVersion = options.apiVersion || \"2020-10-31\";\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as operations from \"./operations\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport { AzureDigitalTwinsAPIContext } from \"./azureDigitalTwinsAPIContext\";\nimport { AzureDigitalTwinsAPIOptionalParams } from \"./models\";\n\nclass AzureDigitalTwinsAPI extends AzureDigitalTwinsAPIContext {\n  /**\n   * Initializes a new instance of the AzureDigitalTwinsAPI class.\n   * @param options The parameter options\n   */\n  constructor(options?: AzureDigitalTwinsAPIOptionalParams) {\n    super(options);\n    this.digitalTwinModels = new operations.DigitalTwinModels(this);\n    this.query = new operations.Query(this);\n    this.digitalTwins = new operations.DigitalTwins(this);\n    this.eventRoutes = new operations.EventRoutes(this);\n  }\n\n  digitalTwinModels: operations.DigitalTwinModels;\n  query: operations.Query;\n  digitalTwins: operations.DigitalTwins;\n  eventRoutes: operations.EventRoutes;\n}\n\n// Operation Specifications\n\nexport {\n  AzureDigitalTwinsAPI,\n  AzureDigitalTwinsAPIContext,\n  Models as AzureDigitalTwinsAPIModels,\n  Mappers as AzureDigitalTwinsAPIMappers\n};\nexport * from \"./operations\";\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getTracer } from \"@azure/core-tracing\";\nimport { Span, SpanOptions, SpanKind } from \"@opentelemetry/api\";\nimport { OperationOptions } from \"@azure/core-http\";\n\ntype OperationTracingOptions = OperationOptions[\"tracingOptions\"];\n\n/**\n * Creates a span using the global tracer.\n * @internal\n * @param name The name of the operation being performed.\n * @param tracingOptions The options for the underlying http request.\n */\nexport function createSpan<T extends OperationOptions>(\n  operationName: string,\n  operationOptions: T\n): { span: Span; updatedOptions: T } {\n  const tracer = getTracer();\n  const tracingOptions = operationOptions.tracingOptions || {};\n  const spanOptions: SpanOptions = {\n    ...tracingOptions.spanOptions,\n    kind: SpanKind.INTERNAL\n  };\n\n  const span = tracer.startSpan(`DigitalTwinsClient.${operationName}`, spanOptions);\n\n  span.setAttribute(\"az.namespace\", \"Microsoft.DigitalTwins\");\n\n  let newSpanOptions = tracingOptions.spanOptions || {};\n  if (span.isRecording()) {\n    newSpanOptions = {\n      ...tracingOptions.spanOptions,\n      parent: span.context(),\n      attributes: {\n        ...spanOptions.attributes,\n        \"az.namespace\": \"Microsoft.DigitalTwins\"\n      }\n    };\n  }\n\n  const newTracingOptions: OperationTracingOptions = {\n    ...tracingOptions,\n    spanOptions: newSpanOptions\n  };\n\n  const newOperationOptions: T = {\n    ...operationOptions,\n    tracingOptions: newTracingOptions\n  };\n\n  return {\n    span,\n    updatedOptions: newOperationOptions\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The @azure/logger configuration for this package.\n */\nexport const logger = createClientLogger(\"azure-digitaltwins-core\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport {\n  TokenCredential,\n  RestResponse,\n  OperationOptions,\n  InternalPipelineOptions,\n  bearerTokenAuthenticationPolicy,\n  createPipelineFromOptions,\n  generateUuid,\n  PipelineOptions\n} from \"@azure/core-http\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { AzureDigitalTwinsAPI as GeneratedClient } from \"./generated/azureDigitalTwinsAPI\";\nimport {\n  DigitalTwinsGetByIdResponse,\n  DigitalTwinsAddOptionalParams,\n  DigitalTwinsAddResponse,\n  DigitalTwinsUpdateOptionalParams,\n  DigitalTwinsUpdateResponse,\n  DigitalTwinsDeleteOptionalParams,\n  DigitalTwinsGetComponentResponse,\n  DigitalTwinsUpdateComponentResponse,\n  DigitalTwinsUpdateComponentOptionalParams,\n  DigitalTwinsAddRelationshipResponse,\n  DigitalTwinsAddRelationshipOptionalParams,\n  DigitalTwinsUpdateRelationshipOptionalParams,\n  DigitalTwinsUpdateRelationshipResponse,\n  DigitalTwinsDeleteRelationshipOptionalParams,\n  DigitalTwinsSendTelemetryOptionalParams,\n  DigitalTwinsSendComponentTelemetryOptionalParams,\n  DigitalTwinsListRelationshipsResponse,\n  IncomingRelationship,\n  DigitalTwinsListIncomingRelationshipsResponse,\n  DigitalTwinsGetRelationshipByIdResponse,\n  DigitalTwinsModelData,\n  DigitalTwinModelsGetByIdResponse,\n  DigitalTwinModelsGetByIdOptionalParams,\n  DigitalTwinModelsAddResponse,\n  DigitalTwinModelsAddOptionalParams,\n  DigitalTwinModelsListResponse,\n  DigitalTwinModelsListOptionalParams,\n  EventRoutesGetByIdResponse,\n  EventRoute,\n  EventRoutesAddOptionalParams,\n  EventRoutesListNextResponse,\n  EventRoutesListOptionalParams,\n  QueryQueryTwinsOptionalParams,\n  QueryQueryTwinsResponse,\n  QuerySpecification\n} from \"./generated/models\";\nimport { createSpan } from \"./tracing\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { logger } from \"./logger\";\n\nexport const SDK_VERSION: string = \"1.0.3\";\n\nexport interface DigitalTwinsClientOptions extends PipelineOptions {\n  /**\n   * Api Version\n   */\n  apiVersion?: string;\n}\n\nconst DEFAULT_DIGITALTWINS_SCOPE = \"https://digitaltwins.azure.net/.default\";\n\n/**\n * Client for Azure IoT DigitalTwins API.\n */\nexport class DigitalTwinsClient {\n  /**\n   * @internal\n   * A reference to the auto-generated AzureDigitalTwinsAPI\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * Creates an instance of AzureDigitalTwinsAPI.\n   *\n   * Example usage:\n   * ```ts\n   * const { DigitalTwinsClient, ServiceClientCredentials } = require(\"@azure/digital-twins-core\");\n   *\n   * const client = new DigitalTwinsClient(\n   *   \"<endpoint>\",\n   *   new DefaultAzureCredential();\n   * );\n   * ```\n   * @param endpointUrl The endpoint URL of the service.\n   * @param credential Used to authenticate requests to the service.\n   * @param options Used to configure the service client.\n   */\n  constructor(\n    endpointUrl: string,\n    credential: TokenCredential,\n    options: DigitalTwinsClientOptions = {}\n  ) {\n    const authPolicy = bearerTokenAuthenticationPolicy(credential, DEFAULT_DIGITALTWINS_SCOPE);\n    const libInfo = `azsdk-js-digital-twins-core/${SDK_VERSION}`;\n\n    const { apiVersion, ...pipelineOptions } = options;\n    if (!pipelineOptions.userAgentOptions) {\n      pipelineOptions.userAgentOptions = {};\n    }\n    if (pipelineOptions.userAgentOptions.userAgentPrefix) {\n      pipelineOptions.userAgentOptions.userAgentPrefix = `${pipelineOptions.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      pipelineOptions.userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...pipelineOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          allowedHeaderNames: [\"x-ms-request-id\"]\n        }\n      }\n    };\n\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);\n\n    this.client = new GeneratedClient({\n      endpoint: endpointUrl,\n      apiVersion,\n      ...pipeline\n    });\n  }\n\n  /**\n   * Get a digital twin\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   * @param options The operation options\n   * @returns The application/json digital twin and the http response.\n   */\n  public getDigitalTwin(\n    digitalTwinId: string,\n    options: OperationOptions = {}\n  ): Promise<DigitalTwinsGetByIdResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-getDigitalTwin\", options);\n    try {\n      return this.client.digitalTwins.getById(digitalTwinId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Create or update a digital twin\n   *\n   * @param digitalTwinId The Id of the digital twin to create or update.\n   * @param digitalTwinJson The application/json digital twin to create.\n   * @param options Extended operation options including\n   *  ifNoneMatch: Only perform the operation if the entity does not already exist.\n   * @returns The created application/json digital twin and the http response.\n   */\n  public upsertDigitalTwin(\n    digitalTwinId: string,\n    digitalTwinJson: string,\n    options: DigitalTwinsAddOptionalParams = {}\n  ): Promise<DigitalTwinsAddResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-upsertDigitalTwin\", options);\n    try {\n      const payload = JSON.parse(digitalTwinJson);\n      return this.client.digitalTwins.add(digitalTwinId, payload, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Update a digital twin using a json patch.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   * @param jsonPatch An update specification described by JSON Patch. Updates to property values\n   * and $model elements may happen in the same request. Operations are limited to add, replace and\n   * remove.\n   * @param options Extended operation options including\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n   * @returns The http response.\n   */\n  public updateDigitalTwin(\n    digitalTwinId: string,\n    jsonPatch: any,\n    options: DigitalTwinsUpdateOptionalParams = {}\n  ): Promise<DigitalTwinsUpdateResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-updateDigitalTwin\", options);\n    try {\n      return this.client.digitalTwins.update(digitalTwinId, jsonPatch, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete a digital twin\n   *\n   * @param digitalTwinId The Id of the digital twin to delete.\n   * @param options Extended operation options including\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n   * @returns The http response.\n   */\n  public deleteDigitalTwin(\n    digitalTwinId: string,\n    options: DigitalTwinsDeleteOptionalParams = {}\n  ): Promise<RestResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-deleteDigitalTwin\", options);\n    try {\n      return this.client.digitalTwins.delete(digitalTwinId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get a component on a digital twin.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   * @param componentName The component being retrieved.\n   * @param options The operation options\n   * @returns Json string representation of the component corresponding to the provided componentName and the HTTP response.\n   */\n  public getComponent(\n    digitalTwinId: string,\n    componentName: string,\n    options: OperationOptions = {}\n  ): Promise<DigitalTwinsGetComponentResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-getComponent\", options);\n    try {\n      return this.client.digitalTwins.getComponent(digitalTwinId, componentName, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Update properties of a component on a digital twin using a JSON patch.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   * @param componentName The component being updated.\n   * @param jsonPatch The application/json-patch+json operations to be performed on the specified digital twin's component.\n   * @param enableUpdate If true then update of an existing digital twin is enabled.\n   * @param options Extended operation options including\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n   * @returns The http response.\n   */\n  public updateComponent(\n    digitalTwinId: string,\n    componentName: string,\n    jsonPatch: any[],\n    options: DigitalTwinsUpdateComponentOptionalParams = {}\n  ): Promise<DigitalTwinsUpdateComponentResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-updateComponent\", options);\n    try {\n      return this.client.digitalTwins.updateComponent(\n        digitalTwinId,\n        componentName,\n        jsonPatch,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get a relationship on a digital twin.\n   *\n   * @param digitalTwinId The Id of the source digital twin.\n   * @param relationshipId The Id of the relationship to retrieve.\n   * @param options The operation options\n   * @returns The pageable list of application/json relationships belonging to the specified digital twin and the http response.\n   */\n  public getRelationship(\n    digitalTwinId: string,\n    relationshipId: string,\n    options: OperationOptions = {}\n  ): Promise<DigitalTwinsGetRelationshipByIdResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-getRelationship\", options);\n    try {\n      return this.client.digitalTwins.getRelationshipById(\n        digitalTwinId,\n        relationshipId,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Create or update a relationship on a digital twin.\n   *\n   * @param digitalTwinId The Id of the source digital twin.\n   * @param relationshipId The Id of the relationship to create.\n   * @param relationship: The application/json relationship to be created.\n   * @param options Extended operation options including\n   *  ifNoneMatch: Only perform the operation if the entity does not already exist.\n   */\n  public upsertRelationship(\n    digitalTwinId: string,\n    relationshipId: string,\n    relationship: any,\n    options: DigitalTwinsAddRelationshipOptionalParams = {}\n  ): Promise<DigitalTwinsAddRelationshipResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-upsertRelationship\", options);\n    try {\n      return this.client.digitalTwins.addRelationship(\n        digitalTwinId,\n        relationshipId,\n        relationship,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Updates the properties of a relationship on a digital twin using a JSON patch.\n   *\n   * @param digitalTwinId The Id of the digital twin to delete.\n   * @param relationshipId The Id of the relationship to be updated.\n   * @param jsonPatch The application/json-patch+json operations to be performed on the specified digital twin's relationship.\n   * @param options Extended operation options\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n   */\n  public updateRelationship(\n    digitalTwinId: string,\n    relationshipId: string,\n    jsonPatch: any[],\n    options: DigitalTwinsUpdateRelationshipOptionalParams = {}\n  ): Promise<DigitalTwinsUpdateRelationshipResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-updateRelationship\", options);\n    try {\n      return this.client.digitalTwins.updateRelationship(\n        digitalTwinId,\n        relationshipId,\n        jsonPatch,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete a relationship on a digital twin.\n   *\n   * @param digitalTwinId The Id of the source digital twin.\n   * @param relationshipId The Id of the relationship to delete.\n   * @param options The operation options\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is\n   * @returns The http response.\n   */\n  public deleteRelationship(\n    digitalTwinId: string,\n    relationshipId: string,\n    options: DigitalTwinsDeleteRelationshipOptionalParams = {}\n  ): Promise<RestResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-deleteRelationship\", options);\n    try {\n      return this.client.digitalTwins.deleteRelationship(\n        digitalTwinId,\n        relationshipId,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the pagination of {@link listRelationships}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {DigitalTwinsListRelationshipsOptionalParams} [options] Common options for the iterative endpoints.\n   *\n   */\n  private async *listRelationshipsPage(\n    digitalTwinId: string,\n    options: OperationOptions,\n    continuationState: PageSettings\n  ): AsyncIterableIterator<DigitalTwinsListRelationshipsResponse> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: OperationOptions = {\n        ...options\n      };\n      const listRelationshipResponse = await this.client.digitalTwins.listRelationships(\n        digitalTwinId,\n        optionsComplete\n      );\n      continuationState.continuationToken = listRelationshipResponse.nextLink;\n      yield listRelationshipResponse;\n    }\n    while (continuationState.continuationToken) {\n      const listRelationshipResponse = await this.client.digitalTwins.listRelationshipsNext(\n        \"\",\n        continuationState.continuationToken,\n        options\n      );\n\n      continuationState.continuationToken = listRelationshipResponse.nextLink;\n      yield listRelationshipResponse;\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link listRelationships}.\n   * @param {DigitalTwinsListRelationshipsOptionalParams} [options] Common options for the iterative endpoints.\n   */\n  private async *listRelationshipsAll(\n    digitalTwinId: string,\n    options: OperationOptions\n  ): AsyncIterableIterator<any> {\n    for await (const page of this.listRelationshipsPage(digitalTwinId, options, {})) {\n      const value = page.value || [];\n      for (const item of value) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * Retrieve relationships for a digital twin.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   */\n  public listRelationships(\n    digitalTwinId: string,\n    options: OperationOptions & PageSettings = {}\n  ): PagedAsyncIterableIterator<any, DigitalTwinsListRelationshipsResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-listRelationships\", options);\n    try {\n      const iter = this.listRelationshipsAll(digitalTwinId, updatedOptions);\n\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: PageSettings = {}) =>\n          this.listRelationshipsPage(digitalTwinId, updatedOptions, settings)\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the pagination of {@link listIncomingRelationships}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {OperationOptions} [options] Common options for the iterative endpoints.\n   *\n   */\n  private async *listIncomingRelationshipsPage(\n    digitalTwinId: string,\n    options: OperationOptions,\n    continuationState: PageSettings\n  ): AsyncIterableIterator<DigitalTwinsListIncomingRelationshipsResponse> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: OperationOptions = {\n        ...options\n      };\n      const listIncomingRelationshipsResponse = await this.client.digitalTwins.listIncomingRelationships(\n        digitalTwinId,\n        optionsComplete\n      );\n      continuationState.continuationToken = listIncomingRelationshipsResponse.nextLink;\n      yield listIncomingRelationshipsResponse;\n    }\n    while (continuationState.continuationToken) {\n      const listIncomingRelationshipsResponse = await this.client.digitalTwins.listIncomingRelationshipsNext(\n        \"\",\n        continuationState.continuationToken,\n        options\n      );\n\n      continuationState.continuationToken = listIncomingRelationshipsResponse.nextLink;\n      yield listIncomingRelationshipsResponse;\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link listIncomingRelationships}.\n   * @param {OperationOptions} [options] Common options for the iterative endpoints.\n   */\n  private async *listIncomingRelationshipsAll(\n    digitalTwinId: string,\n    options: OperationOptions\n  ): AsyncIterableIterator<IncomingRelationship> {\n    for await (const page of this.listIncomingRelationshipsPage(digitalTwinId, options, {})) {\n      const value = page.value || [];\n      yield* value;\n    }\n  }\n\n  /**\n   * Retrieve all incoming relationships for a digital twin.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   */\n  public listIncomingRelationships(\n    digitalTwinId: string,\n    options: OperationOptions & PageSettings = {}\n  ): PagedAsyncIterableIterator<\n    IncomingRelationship,\n    DigitalTwinsListIncomingRelationshipsResponse\n  > {\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-listIncomingRelationships\",\n      options\n    );\n    try {\n      const iter = this.listIncomingRelationshipsAll(digitalTwinId, updatedOptions);\n\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: PageSettings = {}) =>\n          this.listIncomingRelationshipsPage(digitalTwinId, updatedOptions, settings)\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Publish telemetry from a digital twin, which is then consumed by one or many destination endpoints (subscribers) defined under.\n   *\n   * @param digitalTwinId The Id of the digital twin to delete.\n   * @param payload The application/json telemetry payload to be sent.\n   * @param messageId The message Id.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  public publishTelemetry(\n    digitalTwinId: string,\n    payload: any,\n    messageId: string,\n    options: OperationOptions = {}\n  ): Promise<RestResponse> {\n    const digitalTwinsSendTelemetryOptionalParams: DigitalTwinsSendTelemetryOptionalParams = options;\n    digitalTwinsSendTelemetryOptionalParams.telemetrySourceTime = new Date().toISOString();\n    if (!messageId) {\n      messageId = generateUuid();\n    }\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-publishTelemetry\",\n      digitalTwinsSendTelemetryOptionalParams\n    );\n    try {\n      return this.client.digitalTwins.sendTelemetry(\n        digitalTwinId,\n        payload,\n        messageId,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Publish telemetry from a digital twin's component, which is then consumed by one or many destination endpoints (subscribers) defined under.\n   *\n   * @param digitalTwinId The Id of the digital twin to delete.\n   * @param componentName The name of the DTDL component.\n   * @param payload The application/json telemetry payload to be sent.\n   * @param messageId The message Id.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  public publishComponentTelemetry(\n    digitalTwinId: string,\n    componentName: string,\n    payload: string,\n    messageId: string,\n    options: OperationOptions = {}\n  ): Promise<RestResponse> {\n    const digitalTwinsSendComponentTelemetryOptionalParams: DigitalTwinsSendComponentTelemetryOptionalParams = options;\n    digitalTwinsSendComponentTelemetryOptionalParams.telemetrySourceTime = new Date().toISOString();\n    if (!messageId) {\n      messageId = generateUuid();\n    }\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-publishComponentTelemetry\",\n      digitalTwinsSendComponentTelemetryOptionalParams\n    );\n    try {\n      return this.client.digitalTwins.sendComponentTelemetry(\n        digitalTwinId,\n        componentName,\n        payload,\n        messageId,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get a model, including the model metadata and the model definition.\n   *\n   * @param modelId The Id of the model.\n   * @param options Extended operation options including\n   *  includeModelDefinition: When true the model definition will be returned as part of the result. Default value: false.\n   * @returns The application/json model and the http response.\n   */\n  public getModel(\n    modelId: string,\n    includeModelDefinition: boolean = false,\n    options: OperationOptions = {}\n  ): Promise<DigitalTwinModelsGetByIdResponse> {\n    const digitalTwinModelsGetByIdOptionalParams: DigitalTwinModelsGetByIdOptionalParams = options;\n    digitalTwinModelsGetByIdOptionalParams.includeModelDefinition = includeModelDefinition;\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-getModel\",\n      digitalTwinModelsGetByIdOptionalParams\n    );\n    try {\n      return this.client.digitalTwinModels.getById(modelId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the pagination of {@link list}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {DigitalTwinModelsListOptionalParams} [options] Common options for the iterative endpoints.\n   *\n   */\n  private async *getModelsPage(\n    options: DigitalTwinModelsListOptionalParams,\n    continuationState: PageSettings\n  ): AsyncIterableIterator<DigitalTwinModelsListResponse> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: DigitalTwinModelsListOptionalParams = options;\n      optionsComplete.maxItemsPerPage = continuationState.maxPageSize;\n\n      const listResponse = await this.client.digitalTwinModels.list(optionsComplete);\n      continuationState.continuationToken = listResponse.nextLink;\n      yield listResponse;\n    }\n    while (continuationState.continuationToken) {\n      const listResponse = await this.client.digitalTwinModels.listNext(\n        continuationState.continuationToken,\n        options\n      );\n\n      continuationState.continuationToken = listResponse.nextLink;\n      yield listResponse;\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link list}.\n   * @param {DigitalTwinModelsListOptionalParams} [options] Common options for the iterative endpoints.\n   */\n  private async *getModelsAll(\n    options: DigitalTwinModelsListOptionalParams\n  ): AsyncIterableIterator<DigitalTwinsModelData> {\n    const f = {};\n\n    for await (const page of this.getModelsPage(options, f)) {\n      const value = page.value || [];\n      for (const item of value) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * Get the list of models\n   *\n   * @param dependeciesFor The model Ids to have dependencies retrieved. If omitted, all models are retrieved.\n   * @param includeModelDefinition Whether to include the model definition in the result. If false, only the model metadata will be returned.\n   * @param resultsPerPage The maximum number of items to retrieve per request. The server may choose to return less than the requested max.\n   * @returns A pageable set of application/json models and the http response.\n   */\n  public listModels(\n    dependeciesFor?: string[],\n    includeModelDefinition: boolean = false,\n    resultsPerPage?: number,\n    options: OperationOptions & PageSettings = {}\n  ): PagedAsyncIterableIterator<DigitalTwinsModelData, DigitalTwinModelsListResponse> {\n    var digitalTwinModelsListOptionalParams: DigitalTwinModelsListOptionalParams = options;\n    digitalTwinModelsListOptionalParams = {\n      maxItemsPerPage: resultsPerPage,\n      dependenciesFor: dependeciesFor,\n      includeModelDefinition: includeModelDefinition\n    };\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-listModels\",\n      digitalTwinModelsListOptionalParams\n    );\n    try {\n      const iter = this.getModelsAll(updatedOptions);\n\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: PageSettings = {}) =>\n          this.getModelsPage(digitalTwinModelsListOptionalParams, settings)\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Create one or many\n   *\n   * @param models The set of models to create. Each string corresponds to exactly one model.\n   * @param options The operation options\n   * @returns The created application/json models and the http response.\n   */\n  public createModels(\n    dtdlModels: any[],\n    options: OperationOptions = {}\n  ): Promise<DigitalTwinModelsAddResponse> {\n    const digitalTwinModelsAddOptionalParams: DigitalTwinModelsAddOptionalParams = options;\n    digitalTwinModelsAddOptionalParams.models = dtdlModels;\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-createModels\",\n      digitalTwinModelsAddOptionalParams\n    );\n    try {\n      return this.client.digitalTwinModels.add(updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Decommission a model using a json patch.\n   *\n   * @param modelId The Id of the model to decommission.\n   * property can be replaced.\n   * @param options The operation options\n   * @returns The http response.\n   * @summary When a model is decomissioned, new digital twins will no longer be able to be\n   * defined by this model. However, existing digital twins may continue to use this model.\n   * Once a model is decomissioned, it may not be recommissioned.\n   */\n  public decomissionModel(modelId: string, options: OperationOptions = {}): Promise<RestResponse> {\n    const jsonPatch = [{ op: \"replace\", path: \"/decommissioned\", value: true }];\n\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-decomissionModel\", options);\n    try {\n      return this.client.digitalTwinModels.update(modelId, jsonPatch, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete a model.\n   *\n   * @param modelId The Id of the model to delete.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  public deleteModel(modelId: string, options: OperationOptions = {}): Promise<RestResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-deleteModel\", options);\n    try {\n      return this.client.digitalTwinModels.delete(modelId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get an event route.\n   *\n   * @param modelId The Id of the event route.\n   * @param options The operation options\n   * @returns The application/json event route and the http response.\n   */\n  public getEventRoute(\n    eventRouteId: string,\n    options: OperationOptions = {}\n  ): Promise<EventRoutesGetByIdResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-getEventRoute\", options);\n    try {\n      return this.client.eventRoutes.getById(eventRouteId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the pagination of {@link list}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {EventRoutesListOptionalParams} [options] Common options for the iterative endpoints.\n   *\n   */\n  private async *getEventRoutesPage(\n    options: EventRoutesListOptionalParams,\n    continuationState: PageSettings\n  ): AsyncIterableIterator<EventRoutesListNextResponse> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: EventRoutesListOptionalParams = options;\n      optionsComplete.maxItemsPerPage = continuationState.maxPageSize;\n\n      const listResponse = await this.client.eventRoutes.list(optionsComplete);\n      continuationState.continuationToken = listResponse.nextLink;\n      yield listResponse;\n    }\n    while (continuationState.continuationToken) {\n      const listResponse = await this.client.eventRoutes.listNext(\n        continuationState.continuationToken,\n        options\n      );\n\n      continuationState.continuationToken = listResponse.nextLink;\n      yield listResponse;\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link list}.\n   * @param {EventRoutesListOptionalParams} [options] Common options for the iterative endpoints.\n   */\n  private async *getEventRoutesAll(\n    options: EventRoutesListOptionalParams\n  ): AsyncIterableIterator<EventRoute> {\n    const f = {};\n    for await (const page of this.getEventRoutesPage(options, f)) {\n      const value = page.value || [];\n      for (const item of value) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * List the event routes in a digital twins instance.\n   *\n   * @param resultsPerPage The maximum number of items to retrieve per request. The server may choose to return less than\n   * the requested max.\n   * @returns The application/json event route and the http response.\n   */\n  public listEventRoutes(\n    resultsPerPage?: number,\n    options: OperationOptions & PageSettings = {}\n  ): PagedAsyncIterableIterator<EventRoute, EventRoutesListNextResponse> {\n    var eventRoutesListOptionalParams: EventRoutesListOptionalParams = options;\n    eventRoutesListOptionalParams = {\n      maxItemsPerPage: resultsPerPage\n    };\n\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-listEventRoutes\",\n      eventRoutesListOptionalParams\n    );\n    try {\n      const iter = this.getEventRoutesAll(updatedOptions);\n\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: PageSettings = {}) =>\n          this.getEventRoutesPage(eventRoutesListOptionalParams, settings)\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Create or update an event route.\n   *\n   * @param eventRouteId The Id of the event route to create or update.\n   * @param endpointId The id of the endpoint this event route is bound to.\n   * @param filter An expression which describes the events which are routed to the endpoint.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  public upsertEventRoute(\n    eventRouteId: string,\n    endpointId: string,\n    filter: string,\n    options: OperationOptions = {}\n  ): Promise<RestResponse> {\n    const eventRoutesAddOptionalParams: EventRoutesAddOptionalParams = options;\n    const eventRoute: EventRoute = {\n      endpointName: endpointId,\n      filter: filter\n    };\n    eventRoutesAddOptionalParams.eventRoute = eventRoute;\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-upsertEventRoute\",\n      eventRoutesAddOptionalParams\n    );\n    try {\n      return this.client.eventRoutes.add(eventRouteId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete an event route.\n   *\n   * @param eventRouteId The Id of the eventRoute to delete.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  public deleteEventRoute(\n    eventRouteId: string,\n    options: OperationOptions = {}\n  ): Promise<RestResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-deleteEventRoute\", options);\n    try {\n      return this.client.eventRoutes.delete(eventRouteId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the pagination of {@link query}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {OperationOptions} [options] Common options for the iterative endpoints.\n   *\n   */\n  private async *queryTwinsPage(\n    query: string,\n    options: QueryQueryTwinsOptionalParams,\n    continuationState: PageSettings\n  ): AsyncIterableIterator<QueryQueryTwinsResponse> {\n    if (continuationState.continuationToken == null) {\n      const querySpecification: QuerySpecification = {\n        query: query,\n        continuationToken: continuationState.continuationToken\n      };\n      const queryResult = await this.client.query.queryTwins(querySpecification, options);\n      continuationState.continuationToken = queryResult.continuationToken;\n      yield queryResult;\n    }\n    while (continuationState.continuationToken) {\n      const querySpecification: QuerySpecification = {\n        query: query,\n        continuationToken: continuationState.continuationToken\n      };\n      const queryResult = await this.client.query.queryTwins(querySpecification, options);\n\n      continuationState.continuationToken = queryResult.continuationToken;\n      yield queryResult;\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link query}.\n   * @param {OperationOptions} [options] Common options for the iterative endpoints.\n   */\n  private async *queryTwinsAll(\n    query: string,\n    options: QueryQueryTwinsOptionalParams\n  ): AsyncIterableIterator<any> {\n    const f = {};\n\n    for await (const page of this.queryTwinsPage(query, options, f)) {\n      if (page.value) {\n        for (const item of page.value) {\n          yield item;\n        }\n      }\n    }\n  }\n\n  /**\n   * Query for digital twins.\n   *\n   * @param query The query string, in SQL-like syntax.\n   * @param resultsPerPage The maximum number of items to retrieve per request. The server may choose to return less than the requested max.\n   * @returns The pageable list of query results.\n   */\n  public queryTwins(\n    query: string,\n    resultsPerPage?: number,\n    options: OperationOptions & PageSettings = {}\n  ): PagedAsyncIterableIterator<any, QueryQueryTwinsResponse> {\n    var queryQueryTwinsOptionalParams: QueryQueryTwinsOptionalParams = options;\n    queryQueryTwinsOptionalParams = {\n      maxItemsPerPage: resultsPerPage\n    };\n\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-queryTwins\",\n      queryQueryTwinsOptionalParams\n    );\n    try {\n      const iter = this.queryTwinsAll(query, updatedOptions);\n\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: PageSettings = {}) =>\n          this.queryTwinsPage(query, queryQueryTwinsOptionalParams, settings)\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n"],"names":["QueryCollectionFormat","QuerySpecificationMapper","EventRouteMapper","coreHttp.operationOptionsToRequestOptionsBase","coreHttp.Serializer","Mappers.ErrorResponse","Parameters.models","Parameters.apiVersion","Parameters.$host","Parameters.contentType","Parameters.traceparent","Parameters.tracestate","Mappers.PagedDigitalTwinsModelDataCollection","Parameters.dependenciesFor","Parameters.includeModelDefinition","Parameters.maxItemsPerPage","Mappers.DigitalTwinsModelData","Parameters.id","Parameters.updateModel","Parameters.contentType1","Parameters.nextLink","serializer","Mappers.QueryResult","Mappers.QueryQueryTwinsHeaders","Parameters.querySpecification","getByIdOperationSpec","addOperationSpec","deleteOperationSpec","updateOperationSpec","Mappers.DigitalTwinsGetByIdHeaders","Mappers.DigitalTwinsAddHeaders","Parameters.twin","Parameters.ifNoneMatch","Parameters.ifMatch","Mappers.DigitalTwinsUpdateHeaders","Parameters.patchDocument","Mappers.DigitalTwinsGetRelationshipByIdHeaders","Parameters.relationshipId","Mappers.DigitalTwinsAddRelationshipHeaders","Parameters.relationship","Mappers.DigitalTwinsUpdateRelationshipHeaders","Mappers.RelationshipCollection","Parameters.relationshipName","Mappers.IncomingRelationshipCollection","Parameters.telemetry","Parameters.messageId","Parameters.telemetrySourceTime","Parameters.componentPath","Mappers.DigitalTwinsGetComponentHeaders","Mappers.DigitalTwinsUpdateComponentHeaders","listOperationSpec","listNextOperationSpec","Mappers.EventRouteCollection","Mappers.EventRoute","Parameters.eventRoute","__extends","coreHttp.getDefaultUserAgentValue","coreHttp.ServiceClient","operations.DigitalTwinModels","operations.Query","operations.DigitalTwins","operations.EventRoutes","getTracer","SpanKind","createClientLogger","bearerTokenAuthenticationPolicy","createPipelineFromOptions","GeneratedClient","CanonicalCode","__asyncValues","__values","__asyncDelegator","generateUuid"],"mappings":"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"}